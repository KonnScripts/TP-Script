local player = game.Players.LocalPlayer
local userInputService = game:GetService("UserInputService")
local tweenService = game:GetService("TweenService")

-- Create the GUI in CoreGui or PlayerGui with ResetOnSpawn set to false
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "TeleportGUI"
screenGui.ResetOnSpawn = false -- This makes the GUI persist after death

-- Try to place in CoreGui for the best persistence, fallback to PlayerGui
local success, errorMsg = pcall(function()
    screenGui.Parent = game:GetService("CoreGui")
end)

if not success then
    screenGui.Parent = player.PlayerGui
end

local mainFrame = Instance.new("Frame", screenGui)
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 220, 0, 210) -- Made taller to accommodate dropdown
mainFrame.Position = UDim2.new(0.5, -110, 0.5, -105)
mainFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 45)
mainFrame.BorderSizePixel = 0

-- Round the corners
local uiCorner = Instance.new("UICorner", mainFrame)
uiCorner.CornerRadius = UDim.new(0, 8)

-- Add drop shadow
local uiStroke = Instance.new("UIStroke", mainFrame)
uiStroke.Color = Color3.fromRGB(20, 20, 30)
uiStroke.Thickness = 2

-- Title bar
local titleBar = Instance.new("Frame", mainFrame)
titleBar.Name = "TitleBar"
titleBar.Size = UDim2.new(1, 0, 0, 30)
titleBar.BackgroundColor3 = Color3.fromRGB(45, 45, 55)
titleBar.BorderSizePixel = 0

-- Round the top corners of the title bar
local titleCorner = Instance.new("UICorner", titleBar)
titleCorner.CornerRadius = UDim.new(0, 8)

-- Create a frame to mask the bottom corners of the title bar
local bottomMask = Instance.new("Frame", titleBar)
bottomMask.Name = "BottomMask"
bottomMask.Size = UDim2.new(1, 0, 0.5, 0)
bottomMask.Position = UDim2.new(0, 0, 0.5, 0)
bottomMask.BackgroundColor3 = Color3.fromRGB(45, 45, 55)
bottomMask.BorderSizePixel = 0

-- Title text
local titleText = Instance.new("TextLabel", titleBar)
titleText.Name = "TitleText"
titleText.Size = UDim2.new(1, -10, 1, 0)
titleText.Position = UDim2.new(0, 10, 0, 0)
titleText.BackgroundTransparency = 1
titleText.Text = "Player Teleporter"
titleText.TextColor3 = Color3.fromRGB(255, 255, 255)
titleText.Font = Enum.Font.GothamBold
titleText.TextSize = 14
titleText.TextXAlignment = Enum.TextXAlignment.Left

-- Close button
local closeButton = Instance.new("TextButton", titleBar)
closeButton.Name = "CloseButton"
closeButton.Size = UDim2.new(0, 24, 0, 24)
closeButton.Position = UDim2.new(1, -27, 0, 3)
closeButton.BackgroundColor3 = Color3.fromRGB(255, 80, 80)
closeButton.Text = "×"
closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
closeButton.Font = Enum.Font.GothamBold
closeButton.TextSize = 18
closeButton.AutoButtonColor = false

-- Round the close button
local closeCorner = Instance.new("UICorner", closeButton)
closeCorner.CornerRadius = UDim.new(0, 4)

-- Player selection label
local selectorLabel = Instance.new("TextLabel", mainFrame)
selectorLabel.Name = "SelectorLabel"
selectorLabel.Size = UDim2.new(1, -20, 0, 20)
selectorLabel.Position = UDim2.new(0, 10, 0, 40)
selectorLabel.BackgroundTransparency = 1
selectorLabel.Text = "Select a Player:"
selectorLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
selectorLabel.Font = Enum.Font.Gotham
selectorLabel.TextSize = 12
selectorLabel.TextXAlignment = Enum.TextXAlignment.Left

-- Dropdown button
local dropdownButton = Instance.new("TextButton", mainFrame)
dropdownButton.Name = "DropdownButton"
dropdownButton.Size = UDim2.new(1, -20, 0, 40)
dropdownButton.Position = UDim2.new(0, 10, 0, 65)
dropdownButton.BackgroundColor3 = Color3.fromRGB(55, 55, 65)
dropdownButton.Text = "Select Player"
dropdownButton.TextColor3 = Color3.fromRGB(255, 255, 255)
dropdownButton.Font = Enum.Font.Gotham
dropdownButton.TextSize = 14
dropdownButton.BorderSizePixel = 0
dropdownButton.AutoButtonColor = false

-- Add a small indicator for the dropdown
local dropdownIndicator = Instance.new("TextLabel", dropdownButton)
dropdownIndicator.Name = "Indicator"
dropdownIndicator.Size = UDim2.new(0, 20, 0, 20)
dropdownIndicator.Position = UDim2.new(1, -25, 0.5, -10)
dropdownIndicator.BackgroundTransparency = 1
dropdownIndicator.Text = "▼"
dropdownIndicator.TextColor3 = Color3.fromRGB(200, 200, 200)
dropdownIndicator.Font = Enum.Font.Gotham
dropdownIndicator.TextSize = 12

-- Round the dropdown button
local dropdownCorner = Instance.new("UICorner", dropdownButton)
dropdownCorner.CornerRadius = UDim.new(0, 6)

-- Create dropdown menu container (initially hidden)
local dropdownContainer = Instance.new("ScrollingFrame", mainFrame)
dropdownContainer.Name = "DropdownContainer"
dropdownContainer.Size = UDim2.new(1, -20, 0, 0) -- Start with height 0
dropdownContainer.Position = UDim2.new(0, 10, 0, 110) -- Position it below the dropdown button
dropdownContainer.BackgroundColor3 = Color3.fromRGB(65, 65, 75)
dropdownContainer.BorderSizePixel = 0
dropdownContainer.ScrollBarThickness = 4
dropdownContainer.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 120)
dropdownContainer.Visible = false
dropdownContainer.ClipsDescendants = true
dropdownContainer.CanvasSize = UDim2.new(0, 0, 0, 0) -- Will be updated dynamically

-- Round the dropdown container
local containerCorner = Instance.new("UICorner", dropdownContainer)
containerCorner.CornerRadius = UDim.new(0, 6)

-- Teleport button
local button = Instance.new("TextButton", mainFrame)
button.Name = "TeleportButton"
button.Size = UDim2.new(1, -20, 0, 40)
button.Position = UDim2.new(0, 10, 0, 115) -- Adjusted position
button.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
button.Text = "Teleport"
button.TextColor3 = Color3.fromRGB(255, 255, 255)
button.Font = Enum.Font.GothamBold
button.TextSize = 16
button.BorderSizePixel = 0
button.AutoButtonColor = false

-- Round the button
local buttonCorner = Instance.new("UICorner", button)
buttonCorner.CornerRadius = UDim.new(0, 6)

-- Status label (for showing errors or success messages)
local statusLabel = Instance.new("TextLabel", mainFrame)
statusLabel.Name = "StatusLabel"
statusLabel.Size = UDim2.new(1, -10, 0, 16)
statusLabel.Position = UDim2.new(0, 5, 1, -25)
statusLabel.BackgroundTransparency = 1
statusLabel.Text = ""
statusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
statusLabel.Font = Enum.Font.Gotham
statusLabel.TextSize = 12
statusLabel.TextXAlignment = Enum.TextXAlignment.Center

-- Selected player variable
local selectedPlayer = nil

-- Make the GUI draggable
local dragging = false
local dragInput
local dragStart
local startPos

local function updatePosition(input)
    local delta = input.Position - dragStart
    mainFrame.Position = UDim2.new(
        startPos.X.Scale, 
        startPos.X.Offset + delta.X, 
        startPos.Y.Scale, 
        startPos.Y.Offset + delta.Y
    )
end

titleBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = mainFrame.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

titleBar.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

userInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        updatePosition(input)
    end
end)

-- Function to populate the dropdown with players
local function populateDropdown()
    -- Clear existing items
    for _, child in pairs(dropdownContainer:GetChildren()) do
        if child:IsA("TextButton") then
            child:Destroy()
        end
    end
    
    -- Get all players sorted by name
    local players = {}
    for _, plr in pairs(game.Players:GetPlayers()) do
        if plr ~= player then -- Don't include local player
            table.insert(players, plr)
        end
    end
    
    table.sort(players, function(a, b)
        return a.Name:lower() < b.Name:lower()
    end)
    
    -- Create dropdown items
    local itemHeight = 30
    local totalHeight = 0
    
    for i, plr in ipairs(players) do
        local playerButton = Instance.new("TextButton", dropdownContainer)
        playerButton.Name = "Player_" .. plr.Name
        playerButton.Size = UDim2.new(1, -4, 0, itemHeight)
        playerButton.Position = UDim2.new(0, 2, 0, (i-1) * itemHeight + 2)
        playerButton.BackgroundColor3 = i % 2 == 0 and Color3.fromRGB(60, 60, 70) or Color3.fromRGB(55, 55, 65)
        playerButton.Text = plr.Name
        playerButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        playerButton.Font = Enum.Font.Gotham
        playerButton.TextSize = 14
        playerButton.BorderSizePixel = 0
        playerButton.TextXAlignment = Enum.TextXAlignment.Left
        playerButton.AutoButtonColor = false
        
        -- Add padding to text
        local textPadding = Instance.new("UIPadding", playerButton)
        textPadding.PaddingLeft = UDim.new(0, 10)
        
        -- Round the button corners
        local itemCorner = Instance.new("UICorner", playerButton)
        itemCorner.CornerRadius = UDim.new(0, 4)
        
        -- Hover effect
        playerButton.MouseEnter:Connect(function()
            tweenService:Create(playerButton, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(75, 75, 85)}):Play()
        end)
        
        playerButton.MouseLeave:Connect(function()
            tweenService:Create(playerButton, TweenInfo.new(0.1), {BackgroundColor3 = i % 2 == 0 and Color3.fromRGB(60, 60, 70) or Color3.fromRGB(55, 55, 65)}):Play()
        end)
        
        -- Selection functionality
        playerButton.MouseButton1Click:Connect(function()
            selectedPlayer = plr
            dropdownButton.Text = plr.Name
            
            -- Close dropdown with animation
            toggleDropdown(false)
        end)
        
        totalHeight = totalHeight + itemHeight + 2
    end
    
    -- Update canvas size
    dropdownContainer.CanvasSize = UDim2.new(0, 0, 0, totalHeight)
    
    return #players
end

-- Toggle dropdown function
local isDropdownOpen = false
function toggleDropdown(forceState)
    local state = forceState
    if state == nil then
        state = not isDropdownOpen
    end
    
    isDropdownOpen = state
    
    if state then
        -- Update player list before showing
        local playerCount = populateDropdown()
        
        -- Show dropdown
        dropdownContainer.Visible = true
        
        -- Set max height based on players (max 5 visible at once)
        local maxPlayerCount = math.min(playerCount, 5)
        local targetHeight = maxPlayerCount * 30 + 4
        
        -- Adjust button position
        tweenService:Create(button, TweenInfo.new(0.3), {Position = UDim2.new(0, 10, 0, 115 + targetHeight + 5)}):Play()
        
        -- Adjust main frame size
        tweenService:Create(mainFrame, TweenInfo.new(0.3), {Size = UDim2.new(0, 220, 0, 170 + targetHeight)}):Play()
        
        -- Animate dropdown opening
        tweenService:Create(dropdownContainer, TweenInfo.new(0.3), {Size = UDim2.new(1, -20, 0, targetHeight)}):Play()
        
        -- Rotate dropdown indicator
        tweenService:Create(dropdownIndicator, TweenInfo.new(0.3), {Rotation = 180}):Play()
    else
        -- Animate dropdown closing
        tweenService:Create(dropdownContainer, TweenInfo.new(0.3), {Size = UDim2.new(1, -20, 0, 0)}):Play()
        
        -- Move button back up
        tweenService:Create(button, TweenInfo.new(0.3), {Position = UDim2.new(0, 10, 0, 115)}):Play()
        
        -- Adjust main frame size back
        tweenService:Create(mainFrame, TweenInfo.new(0.3), {Size = UDim2.new(0, 220, 0, 170)}):Play()
        
        -- Rotate dropdown indicator back
        tweenService:Create(dropdownIndicator, TweenInfo.new(0.3), {Rotation = 0}):Play()
        
        -- Hide dropdown after animation completes
        task.delay(0.3, function()
            if not isDropdownOpen then
                dropdownContainer.Visible = false
            end
        end)
    end
end

-- Button hover effects
dropdownButton.MouseEnter:Connect(function()
    tweenService:Create(dropdownButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(65, 65, 75)}):Play()
end)

dropdownButton.MouseLeave:Connect(function()
    tweenService:Create(dropdownButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(55, 55, 65)}):Play()
end)

button.MouseEnter:Connect(function()
    tweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(0, 145, 220)}):Play()
end)

button.MouseLeave:Connect(function()
    tweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(0, 170, 255)}):Play()
end)

closeButton.MouseEnter:Connect(function()
    tweenService:Create(closeButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(230, 60, 60)}):Play()
end)

closeButton.MouseLeave:Connect(function()
    tweenService:Create(closeButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(255, 80, 80)}):Play()
end)

-- Button click effects
button.MouseButton1Down:Connect(function()
    tweenService:Create(button, TweenInfo.new(0.1), {Size = UDim2.new(1, -24, 0, 38), Position = UDim2.new(0, 12, button.Position.Y.Scale, button.Position.Y.Offset + 1)}):Play()
end)

button.MouseButton1Up:Connect(function()
    tweenService:Create(button, TweenInfo.new(0.1), {Size = UDim2.new(1, -20, 0, 40), Position = UDim2.new(0, 10, button.Position.Y.Scale, button.Position.Y.Offset - 1)}):Play()
end)

-- Dropdown button click
dropdownButton.MouseButton1Click:Connect(function()
    toggleDropdown()
end)

-- Close button functionality
closeButton.MouseButton1Click:Connect(function()
    screenGui:Destroy()
end)

-- Function to handle teleportation
local function teleportToPlayer()
    if not selectedPlayer then
        statusLabel.Text = "Please select a player"
        statusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
        
        -- Shake the dropdown button
        local originalPosition = dropdownButton.Position
        for i = 1, 5 do
            dropdownButton.Position = originalPosition + UDim2.new(0, (i % 2 == 0) and 5 or -5, 0, 0)
            task.wait(0.05)
        end
        dropdownButton.Position = originalPosition
        
        return
    end
    
    -- Check if selected player is still in game
    if not selectedPlayer or not selectedPlayer.Parent or not selectedPlayer.Character or not selectedPlayer.Character:FindFirstChild("HumanoidRootPart") then
        statusLabel.Text = "Player no longer available"
        statusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
        selectedPlayer = nil
        dropdownButton.Text = "Select Player"
        return
    end
    
    statusLabel.Text = "Teleporting to " .. selectedPlayer.Name
    statusLabel.TextColor3 = Color3.fromRGB(100, 255, 100)
    
    local targetCFrame = selectedPlayer.Character.HumanoidRootPart.CFrame
    local localCharacter = player.Character
    
    if localCharacter and localCharacter:FindFirstChild("HumanoidRootPart") then
        -- Create a teleport effect
        local effect = Instance.new("Part", workspace)
        effect.Shape = Enum.PartType.Ball
        effect.Material = Enum.Material.Neon
        effect.Size = Vector3.new(2, 2, 2)
        effect.Position = localCharacter.HumanoidRootPart.Position
        effect.Anchored = true
        effect.CanCollide = false
        effect.Transparency = 0.3
        effect.Color = Color3.fromRGB(0, 200, 255)
        
        -- Animate the effect
        tweenService:Create(effect, TweenInfo.new(0.5), {Size = Vector3.new(0, 0, 0), Transparency = 1}):Play()
        
        -- Teleport after a short delay
        task.delay(0.2, function()
            -- Use CFrame for proper teleportation
            -- Adding a small Y offset to prevent being stuck in the ground
            local teleportCFrame = CFrame.new(
                targetCFrame.Position + Vector3.new(0, 3, 0),
                targetCFrame.Position + targetCFrame.LookVector * 5
            )
            
            -- Set CFrame for teleportation
            localCharacter.HumanoidRootPart.CFrame = teleportCFrame
            
            -- Create arrival effect
            local arrivalEffect = Instance.new("Part", workspace)
            arrivalEffect.Shape = Enum.PartType.Ball
            arrivalEffect.Material = Enum.Material.Neon
            arrivalEffect.Size = Vector3.new(0, 0, 0)
            arrivalEffect.Position = teleportCFrame.Position
            arrivalEffect.Anchored = true
            arrivalEffect.CanCollide = false
            arrivalEffect.Transparency = 1
            arrivalEffect.Color = Color3.fromRGB(0, 200, 255)
            
            -- Animate arrival effect
            tweenService:Create(arrivalEffect, TweenInfo.new(0.5), {Size = Vector3.new(5, 5, 5), Transparency = 0.3}):Play()
            task.delay(0.5, function()
                tweenService:Create(arrivalEffect, TweenInfo.new(0.5), {Size = Vector3.new(0, 0, 0), Transparency = 1}):Play()
                task.delay(0.5, function()
                    arrivalEffect:Destroy()
                end)
            end)
            
            task.delay(1, function()
                statusLabel.Text = "Teleported successfully!"
                task.delay(3, function()
                    statusLabel.Text = ""
                end)
            end)
        end)
        
        -- Clean up the first effect
        task.delay(0.5, function()
            effect:Destroy()
        end)
    else
        statusLabel.Text = "Your character is missing!"
        statusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
        task.delay(2, function()
            statusLabel.Text = ""
        end)
    end
end

-- Connect button click to teleportation function
button.MouseButton1Click:Connect(teleportToPlayer)

-- Auto-update the player list when players join or leave
game.Players.PlayerAdded:Connect(function()
    -- If dropdown is open, update it
    if isDropdownOpen then
        populateDropdown()
    end
    
    -- If selected player is no longer valid, reset selection
    if selectedPlayer and not selectedPlayer.Parent then
        selectedPlayer = nil
        dropdownButton.Text = "Select Player"
    end
end)

game.Players.PlayerRemoving:Connect(function(plr)
    -- If dropdown is open, update it
    if isDropdownOpen then
        populateDropdown()
    end
    
    -- If selected player left, reset selection
    if selectedPlayer == plr then
        selectedPlayer = nil
        dropdownButton.Text = "Select Player"
        statusLabel.Text = "Selected player left the game"
        statusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
        task.delay(2, function()
            statusLabel.Text = ""
        end)
    end
end)

-- Check if there's an existing TeleportGUI and remove it
for _, gui in pairs(player.PlayerGui:GetChildren()) do
    if gui.Name == "TeleportGUI" and gui ~= screenGui then
        gui:Destroy()
    end
end

-- Also check CoreGui
pcall(function()
    for _, gui in pairs(game:GetService("CoreGui"):GetChildren()) do
        if gui.Name == "TeleportGUI" and gui ~= screenGui then
            gui:Destroy()
        end
    end
end)
            gui:Destroy()
        end
    end
end)
